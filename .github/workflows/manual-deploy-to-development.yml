name: RELEASE_TO_STAGING

env:
  TZ: "Asia/Tokyo"

on:
  workflow_dispatch:
    inputs:
      tagName:
        description: "タグ名 (e.g. v1.0.0)"
        required: true
      targetRef:
        description: "リリース対象のref (e.g. refs/heads/some-branch)"
        required: true
        default: main

permissions:
  id-token: write
  contents: write
  actions: read

jobs:
  release-to-staging:
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ github.event.inputs.tagName }}
      TARGET_REF: ${{ github.event.inputs.targetRef }}
    steps:
      - name: Check semver format of target tag
        run: |
          if [[ ! ${{ env.TAG_NAME }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid semver format. Please use vX.Y.Z."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_REF }}

      - name: Tagging
        run: git tag ${{ env.TAG_NAME }}

      - name: Push tag
        run: git push origin ${{ env.TAG_NAME }}

      - name: Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |

          # リポジトリの最新状態を取得
          git fetch --all --tags
      
          # タグの存在を確認
          if ! git rev-parse ${{ env.TAG_NAME }} >/dev/null 2>&1; then
            echo "Error: Tag ${{ env.TAG_NAME }} does not exist in the repository."
            exit 1
          fi

          # 現在のタグの一つ前のタグの取得を試みる
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ env.TAG_NAME }}^ 2>/dev/null || echo "")
          echo "Previous tag: $PREV_TAG"
      
          if [ -z "$PREV_TAG" ]; then
            # 前のタグが見つからない場合、最初のコミットからのリリースノートを生成
            NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes -F tag_name=${{ env.TAG_NAME }} --jq .body)
          else
            # 前のタグが見つかった場合、そのタグからのリリースノートを生成
            NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes -F tag_name=${{ env.TAG_NAME }} -F previous_tag_name=$PREV_TAG --jq .body)
          fi
      
          # リリースを作成（タグを明示的に指定）
          gh release create ${{ env.TAG_NAME }} --target ${{ env.TARGET_REF }} -t "${{ env.TAG_NAME }}" -n "$NOTES"
